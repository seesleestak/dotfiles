" vim-plug ---------------------------------------
call plug#begin('~/.vim/plugged')
  " Core editor functionality
  Plug 'SirVer/ultisnips'
  Plug 'alvan/vim-closetag'
  Plug 'ap/vim-buftabline'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-eunuch'
  Plug 'tpope/vim-surround'

  " File management/navigation
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'
  Plug 'justinmk/vim-dirvish'

  " Git
  Plug 'airblade/vim-gitgutter'
  Plug 'tpope/vim-fugitive'

  " JS
  Plug 'mxw/vim-jsx'
  Plug 'pangloss/vim-javascript'
  Plug 'w0rp/ale'

  " Colorschemes
  " Plug 'chriskempson/base16-vim'
call plug#end()
" ------------------------------------------------

set nocompatible
set backspace=indent,eol,start " Allow backspace
set mouse=n " Allow scrolling
set hidden " Hide buffers instead of closing
set autoread " Auto reload if file changes outside of vim
set lazyredraw " Only redraw once macro is done running
set number " Show line numbers
set relativenumber " Show relative line numbers
set noeb vb t_vb= " Disable beep
set nowrap " Don't wrap lines

" Fixes ESC delay
set timeoutlen=1000 
set ttimeoutlen=0 

" Tab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set smarttab
set expandtab
set autoindent
autocmd Filetype cpp setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4

" Backup handling
" set directory^=$HOME/.vim/swapfiles/
set noswapfile
set undodir=~/.vim/undodir
set undofile

" Clipboard
set clipboard=unnamedplus,unnamed

" Show col,row at bottom
set ruler
set rulerformat=%l,%v

" Disables automatic commenting on newline
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Syntax Highlighting
" if (has("termguicolors"))
  " set termguicolors
  " set t_8f=[38;2;%lu;%lu;%lum
  " set t_8b=[48;2;%lu;%lu;%lum
" endif

syntax enable
colorscheme nord

" Create Rg command for fzf
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)

" Plugin config ----------------------------------
  " Closetag
  let g:closetag_filenames = '*.html,*.js'

  " UltiSnips
  let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'

  " vim-javascript
  let g:javascript_conceal = 0
  
  " dirvish config
  let g:dirvish_mode = 2
  let g:dirvish_relative_paths = 1
" ------------------------------------------------

" Mappings -------------------------------------
  " <leader>
  let mapleader = "\<Space>"

  nnoremap <leader>s :update<CR>
  nnoremap <leader>q :q<CR>

  " Copy file path of current buffer
  nnoremap <leader>p :call CopyPath()<CR>

  " Copy directory of current buffer
  nnoremap <leader>d :call CopyPathDir()<CR>
  
  " Open and source vimrc
  nnoremap <leader>v :e $MYVIMRC<CR>
  nnoremap <leader>r :source $MYVIMRC<CR>

  " Open zshrc
  nnoremap <leader>z :e ~/dotfiles/zsh/.zshrc<CR>

  " commentary mapping
  noremap <leader>c :Commentary<CR>

  " Buffer related mappings
  nnoremap <C-l> :bnext<CR>
  nnoremap <C-h> :bprevious<CR>
  nnoremap <leader>bq :bprevious <BAR> bd #<CR>

  " fzf mappings
  nnoremap <leader>t :Files<CR>
  nnoremap <leader>a :Rg<space>
  nnoremap <leader>f :Rg <C-r><C-w><CR>
  nnoremap <leader>gst :GFiles?<CR>

  " ALE
  nnoremap <leader>w :ALENextWrap<CR>
  nnoremap <C-p> :call FixPrettierEslint()<CR>
  nnoremap <leader>e :call FixEslint()<CR>

  " Show entire path on Ctrl+g
  nnoremap <C-g> 1<C-g>
  nnoremap <leader>lg :call EasyConsoleLog()<CR>
" ------------------------------------------------

source ~/.vim/functions.vim

filetype plugin indent on

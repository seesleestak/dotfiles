" ==================== PLUGINS ==================== 
call plug#begin('~/.vim/plugged')
  " Core editor functionality
  Plug 'alvan/vim-closetag'
  Plug 'tpope/vim-commentary'
  Plug 'tpope/vim-surround'
  Plug 'w0rp/ale'
  Plug 'tpope/vim-eunuch'
  Plug 'SirVer/ultisnips'
  Plug 'ap/vim-buftabline'

  " File management/navigation
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
  Plug 'junegunn/fzf.vim'
  Plug 'justinmk/vim-dirvish'

  " Git
  Plug 'airblade/vim-gitgutter'
  Plug 'tpope/vim-fugitive'

  " JS
  Plug 'MaxMEllon/vim-jsx-pretty'
  Plug 'pangloss/vim-javascript'
  Plug 'jparise/vim-graphql'

  " Rust
  Plug 'rust-lang/rust.vim'

  " Colorschemes
  Plug 'dracula/vim', { 'as': 'dracula' }
call plug#end()

" Closetag
let g:closetag_filenames = '*.html,*.js,*.jsx,*.svelte'

" dirvish config
let g:dirvish_mode = 2
let g:dirvish_relative_paths = 1

" dracula
let g:dracula_italic = 0

" buftabline
let g:buftabline_indicators = 1

" ==================== MAPPINGS ==================== 
" <leader>
let mapleader = "\<Space>"

nnoremap <leader>s :update<CR>
nnoremap <leader>q :quit<CR>
nnoremap <leader>e :checktime<CR>
nnoremap <leader>n :NewFile<space>

" Copy current buffer file path
nnoremap <leader>yy :call CopyPath(0)<CR>

" Copy current buffer directory
nnoremap <leader>yd :call CopyPath(1)<CR>

" Open and source vimrc
nnoremap <leader>v :e $MYVIMRC<CR>
nnoremap <leader>r :source $MYVIMRC<CR>

" commentary mapping
noremap <leader>c :Commentary<CR>

" Buffer related mappings
nnoremap <leader>d :bd!<CR>
nnoremap <leader>b :b #<CR>
nnoremap <C-l> :bnext<CR>
nnoremap <C-h> :bprev<CR>

" fzf mappings
nnoremap <leader>t   :Files<CR>     
nnoremap <leader>a   :Rg<space>
nnoremap <leader>f   :Rg <C-R><C-W><CR>
nnoremap <leader>l   :Buffers<CR>   
nnoremap <leader>gst :GFiles?<CR>   

" Format buffer
nnoremap <leader>i :call Format()<CR>

" ALE
nnoremap <leader>w :ALENextWrap<CR>

" Show entire path on Ctrl+g
nnoremap <C-g> 1<C-g>

" Log function
nnoremap <leader>gl :call Log(0)<CR>
vnoremap <leader>gl "zy:call Log(1)<CR>

" Find and replace
nnoremap <leader>m :%s/<C-R><C-W>//gc<left><left><left>

" Spelling suggestions with fzf
nnoremap z= :call FzfSpell()<CR>

" ==================== FUNCTIONS ==================== 
" Billy Montgomery's log creator
function! Log(isVisual) abort
  if a:isVisual
    let word = @z
  else
    let word = expand("<cword>")
  endif 
  let ft = &filetype

  if ft == 'rust'
    execute "normal! oprintln!(\"" . word . " --- {}\", " . word . ");"
  elseif ft == 'sh'
    execute "normal! oecho \"" . word . " --- $" . word . "\""
  elseif ft == 'vim'
    execute "normal! oechom \"" . word . " --- \" . " . word
  elseif ft == 'javascript' || ft == 'javascriptreact'
    execute "normal! oconsole.log(\"" . word . " --- \", " . word . ")"
  endif
endfunction

" Copy current buffer path to multiple buffers
function! CopyPath(dirPath) abort
  if a:dirPath
    execute "let @*=expand('%:p:h')"
    execute "let @+=expand('%:p:h')"
  else
    execute "let @*=expand('%:p')"
    execute "let @+=expand('%:p')"
  endif
endfunction

function! Format() abort
  let ft = &filetype
  if ft == 'rust'
    execute "RustFmt"
  elseif ft == 'json' || ft == 'scss'
    let b:ale_fixers = ['prettier']
    execute "ALEFix"
  elseif ft == 'javascript' || ft == 'javascriptreact'
    let b:ale_fixers = ['prettier', 'eslint']
    execute "ALEFix"
  endif
endfunction

function! FzfSpell()
  function! FzfSpellSink(word)
    execute 'normal! "_ciw' . a:word
  endfunction
  return fzf#run({
    \ 'source': spellsuggest(expand("<cword>")),
    \ 'sink': function("FzfSpellSink"),
    \ 'down': 10,
    \ 'options': ['--border']
    \ })
endfunction

function! NewFile(name) abort
  let dirname = expand("%:h")
  execute "edit " dirname . "/" . a:name
endfunction

" ==================== COMMANDS ==================== 
" Override Rg to add preview and border
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case -- '.shellescape(<q-args>), 1,
  \   fzf#vim#with_preview({'options': ['--border']}), <bang>0)

" Override Files to add fzf border
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, {'options': ['--border']}, <bang>0)

command! -bang -nargs=* NewFile
  \ call NewFile(<q-args>)

" ==================== CONFIG ==================== 
" Do not unload abandoned buffers
set hidden

" Allow backspace
set backspace=indent,eol,start

" Allow scrolling in normal mode
set mouse=nvi

" Auto reload if file changes outside of vim
set autoread

" Line numbers
set number
set relativenumber

" Disable beep
set noeb vb t_vb=

" Wrap
set nowrap
set linebreak

" Command line tab completion
set wildmenu

" Show a few lines of context around the cursor
set scrolloff=5

" Fixes ESC delay
set timeoutlen=1000 
set ttimeoutlen=0 

" Tab
set smarttab
set expandtab
set autoindent
set tabstop=2 shiftwidth=2 softtabstop=2

" Search
set incsearch

" Backup handling
set noswapfile
set undodir=~/.vim/undodir
set undofile

" Clipboard
set clipboard=unnamed,unnamedplus

" Show col,row at bottom
set ruler

" Set syntax highlight limit
set synmaxcol=225

" Don't polute home directory with viminfo
set viminfo+=n~/.vim/viminfo

syntax enable
set termguicolors
colorscheme dracula

filetype plugin indent on
